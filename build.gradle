buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.1"
    }
}

ext {
    grailsApps = ['adjacencylist', 'closuretable', 'pathenumeration']
    grailsPlugins = ['common']
}

subprojects { project ->

    boolean isGrailsApp = grailsApps.contains(project.name)
    boolean  isGrailsWebPlugin = grailsPlugins.contains(project.name)
    if ( isGrailsApp  ) {

        apply plugin:"eclipse"
        apply plugin:"idea"
        apply plugin:"war"
        apply plugin:"org.grails.grails-web"

        repositories {
            mavenLocal()
            maven { url "https://repo.grails.org/grails/core" }
        }

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-dependencies"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:scaffolding"
            compile "org.grails.plugins:hibernate5"
            compile "org.hibernate:hibernate-core:5.1.3.Final"
            console "org.grails:grails-console"
            profile "org.grails.profiles:web"
            runtime 'mysql:mysql-connector-java:5.1.40'
            runtime "org.postgresql:postgresql:$postgresSQLVersion"

            testCompile "org.grails:grails-plugin-testing"
        }

        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            addResources = true
        }

        project.afterEvaluate {
            for (Task task : project.getTasks()) {
                if (task instanceof JavaExec) {
                    (task as JavaExec).jvmArgs "-javaagent:/Users/sdelamo/Applications/xrebel/xrebel.jar"
                }
            }
        }
    }

    if ( isGrailsWebPlugin ) {
        apply plugin:"eclipse"
        apply plugin:"idea"
        apply plugin:"org.grails.grails-plugin"
        apply plugin:"org.grails.grails-gsp"

        repositories {
            mavenLocal()
            maven { url "https://repo.grails.org/grails/core" }
        }

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-dependencies"
            compile "org.grails:grails-web-boot"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:scaffolding"
            console "org.grails:grails-console"
            profile "org.grails.profiles:web-plugin"
            provided "org.grails:grails-plugin-services"
            provided "org.grails:grails-plugin-domain-class"
            testCompile "org.grails:grails-plugin-testing"
        }


        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            addResources = true
        }
// enable if you wish to package this plugin as a standalone application
        bootRepackage.enabled = false
    }
}